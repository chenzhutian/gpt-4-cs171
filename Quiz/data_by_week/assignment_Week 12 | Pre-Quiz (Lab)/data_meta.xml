<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/xsd/ims_qtiasiv1p2p1.xsd">
  <assessment ident="gd208cb07267d60dc3aaba5c94410fa5f" title="Week 12 | Pre-Quiz (Lab)">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>cc_maxattempts</fieldlabel>
        <fieldentry>1</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <section ident="root_section">
      <item ident="g138517102f460b2f80cebc2f5725c166" title="The Fetch API">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_answers_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>0.2</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>9384,408,69896,64545</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g0e74c8e2386e3d1b44f711f6c713cd54</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Why is the Fetch API useful? (Select the three answers that apply)&lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Multiple">
            <render_choice>
              <response_label ident="9384">
                <material>
                  <mattext texttype="text/plain">It allows us to fetch ressources asynchronously.</mattext>
                </material>
              </response_label>
              <response_label ident="408">
                <material>
                  <mattext texttype="text/plain">It's a simplified version of the XMLHttpRequest, which is the state of the art! However, in the CS171 setting, it makes sense to use fetch() because the teaching staff doesn't want to overwhelm the students..</mattext>
                </material>
              </response_label>
              <response_label ident="69896">
                <material>
                  <mattext texttype="text/plain">It is extremely simple to set up.</mattext>
                </material>
              </response_label>
              <response_label ident="64545">
                <material>
                  <mattext texttype="text/plain">We can write some apply methods to the response object (by writing simple one-liners) to extract the information we need.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <and>
                <varequal respident="response1">9384</varequal>
                <not>
                  <varequal respident="response1">408</varequal>
                </not>
                <varequal respident="response1">69896</varequal>
                <varequal respident="response1">64545</varequal>
              </and>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
      </item>
      <item ident="g83c69fa137b0d1d744ea7d2923e298ed" title="Have you seen this before?">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>0.2</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>3715,8449,7016,798</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>ged23b6e1897ab650451cc7f6c810d5c0</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;p&gt;Here's an example for a simple fetch() request from the documentation.&amp;nbsp;&lt;/p&gt;
&lt;pre class="brush: js notranslate line-numbers language-js"&gt;&lt;code class=" language-js"&gt;&lt;span class="token function"&gt;fetch&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;'http://example.com/movies.json'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
  &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;then&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token parameter"&gt;response&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; response&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;json&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
  &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;then&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token parameter"&gt;data&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; console&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;log&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;data&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The architecture of this code snipped should look somewhat familiar to you. Which lines do ring a bell and why?&lt;/p&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="3715">
                <material>
                  <mattext texttype="text/plain">I know the website. example.com is famous for its outstanding movie database.</mattext>
                </material>
              </response_label>
              <response_label ident="8449">
                <material>
                  <mattext texttype="text/plain">the .then() method reminds me of the various d3 fetches (d3.csv, etc..) Apparently, the fetch API returns a promise as well.</mattext>
                </material>
              </response_label>
              <response_label ident="7016">
                <material>
                  <mattext texttype="text/plain">I've seen console.logs before, and I know how a JSON data structure looks like, but other than that, I have no idea what's going on and I don't think that we've done anything close to that.</mattext>
                </material>
              </response_label>
              <response_label ident="798">
                <material>
                  <mattext texttype="text/plain">This is all new to me.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">8449</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
      </item>
      <item ident="g7806766a2989f590c898f2b1d51b6e1e" title="What is happening here?">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_answers_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>0.1</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>58558,20187,15158,97019</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g38ca5d342fecc1cb1bbbfafb0c8d2ec1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;pre class="brush: js notranslate line-numbers language-js"&gt;&lt;code class=" language-js"&gt;&lt;span class="token function"&gt;fetch&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token string"&gt;'http://example.com/movies.xml'&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
  &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;then&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token parameter"&gt;response&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; response&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;json&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;
  &lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;then&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;&lt;span class="token parameter"&gt;data&lt;/span&gt; &lt;span class="token operator"&gt;=&amp;gt;&lt;/span&gt; console&lt;span class="token punctuation"&gt;.&lt;/span&gt;&lt;span class="token function"&gt;log&lt;/span&gt;&lt;span class="token punctuation"&gt;(&lt;/span&gt;data&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;)&lt;/span&gt;&lt;span class="token punctuation"&gt;;&lt;br&gt;&lt;br&gt;What is happening here? What is the output of the console.log? Is this code consistent? Select all that apply.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Multiple">
            <render_choice>
              <response_label ident="58558">
                <material>
                  <mattext texttype="text/plain">We'll see an error message because we can't use the .json() method successfully on the response any more.</mattext>
                </material>
              </response_label>
              <response_label ident="20187">
                <material>
                  <mattext texttype="text/plain">The console log will be a 'stringified' json.</mattext>
                </material>
              </response_label>
              <response_label ident="15158">
                <material>
                  <mattext texttype="text/plain">In this example, the URL links to an xml file. The appropriate method to deal with this response object would be .text()</mattext>
                </material>
              </response_label>
              <response_label ident="97019">
                <material>
                  <mattext texttype="text/plain">Since the body of the response object will be a long xml-structured string,  we need to use the .xmlToJson() method to convert the body of the response object into JSON format.</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <and>
                <varequal respident="response1">58558</varequal>
                <not>
                  <varequal respident="response1">20187</varequal>
                </not>
                <varequal respident="response1">15158</varequal>
                <not>
                  <varequal respident="response1">97019</varequal>
                </not>
              </and>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
          </respcondition>
        </resprocessing>
      </item>
    </section>
  </assessment>
</questestinterop>
